What is Java
Java is a popular and powerful programming language, created in 1995.It is owned by Oracle, and more than 3 Billion devices run Java.

It is used for:
1. Mobile applications (specially Android apps)
2. Desktop applications
3. Web applications
4. Web servers and application servers
5. Games
6.Database connection
7. And much, much more!

Why Use Java?
Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)
1. It is one of the most popular programming languages in the world
2. It has a large demand in the current job market
3. It is easy to learn and simple to use
4. It is open-source and free
5. It is secure, fast and powerful
6. It has huge community support (tens of millions of developers)
7. Java is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs
8. As Java is close to C++ and C#, it makes it easy for programmers to switch to Java or vice versa

----------------------------------------------
JAVA SYNTAX
Every line of code that runs in Java must be inside a class. The class name should always start with an uppercase first letter. In our example, we named the class Main.

Note: Java is case-sensitive. MyClass and myclass would be treated as two completely different names.

The name of the Java file must match the class name. So if your class is called Main, the file must be saved as Main.java. This is because Java uses the class name to find and run your code. If the names don't match, Java will give an error and the program will not run.

--------------------------------------
THE MAIN METHOD
The main() method is required in every Java program. It is where the program starts running:

public static void main(String[] args)

Any code placed inside the main() method will be executed.

-----------------------------------------------

System.out.println()
Inside the main() method, we can use the println() method to print a line of text to the screen:

Example

public static void main(String[] args) {
  System.out.println("Hello World");
}

------------------------------------------------------------
Statements
A computer program is a list of "instructions" to be "executed" by a computer.

In a programming language, these programming instructions are called statements.

The following statement "instructs" the compiler to print the text "Java is fun!" to the screen:

ExampleGet your own Java Server
System.out.println("Java is fun!");
It is important that you end the statement with a semicolon ;.

If you forget the semicolon (;), an error will occur and the program will not run:

Example
System.out.println("Java is fun!")
Result:

error: ';' expected

---------------------------------------------------

Many Statements
Most Java programs contain many statements.

The statements are executed, one by one, in the same order as they are written:

public class Main {
  public static void main(String[] args) {
    System.out.println("Hello World!");
    System.out.println("Have a good day!");
    System.out.println("Learning Java is fun!");
  }
}

Many Statements
Most Java programs contain many statements.

The statements are executed, one by one, in the same order as they are written:

-------------------------------------------
Java Output / Print

 Print Text

You can use the println() method to output values or print text in Java:
You can add as many printIn() methods as you want. Note that it will add a new line for each method

Double Quotes
Text must be wrapped inside double quotations marks "".
If you forget the double quotes, an error occurs:

--------------------------
The Print() Method

There is also a print() method, which is similar to println().
The only difference is that it does not insert a new line at the end of the output
------------------------
Print Numbers
You can also use the println() method to print numbers.

However, unlike text, we don't put numbers inside double quotes:
You can also perform mathematical calculations inside the println() method:

-----------------------------------------------------------
Declaring (Creating) Variables
To create a variable in Java, you need to:

Choose a type (like int or String)
Give the variable a name (like x, age, or name)
Optionally assign it a value using =
Here's the basic syntax:
type variableName = value;

---------------------------------------------------------------

Display Variables
The println() method is often used to display variables.
To combine both text and a variable, use the + character:

You can also use the + character to add a variable to another variable:

In Java, the + symbol has two meanings:

For text (strings), it joins them together (called concatenation).
For numbers, it adds values together.
For numeric values, the + character works as a mathematical operator (we use int (integer) variables here):